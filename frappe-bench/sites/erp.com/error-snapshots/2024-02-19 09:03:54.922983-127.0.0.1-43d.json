{
 "etype": "OperationalError",
 "evalue": "OperationalError(2003, \"Can't connect to MySQL server on '127.0.0.1' ([Errno 111] Connection refused)\")",
 "exception": {
  "args": [
   40,
   50,
   48,
   48,
   51,
   44,
   32,
   34,
   67,
   97,
   110,
   39,
   116,
   32,
   99,
   111,
   110,
   110,
   101,
   99,
   116,
   32,
   116,
   111,
   32,
   77,
   121,
   83,
   81,
   76,
   32,
   115,
   101,
   114,
   118,
   101,
   114,
   32,
   111,
   110,
   32,
   39,
   49,
   50,
   55,
   46,
   48,
   46,
   48,
   46,
   49,
   39,
   32,
   40,
   91,
   69,
   114,
   114,
   110,
   111,
   32,
   49,
   49,
   49,
   93,
   32,
   67,
   111,
   110,
   110,
   101,
   99,
   116,
   105,
   111,
   110,
   32,
   114,
   101,
   102,
   117,
   115,
   101,
   100,
   41,
   34,
   41
  ],
  "errno": [
   52,
   48,
   56,
   52
  ],
  "original_exception": [
   67,
   111,
   110,
   110,
   101,
   99,
   116,
   105,
   111,
   110,
   82,
   101,
   102,
   117,
   115,
   101,
   100,
   69,
   114,
   114,
   111,
   114,
   40,
   49,
   49,
   49,
   44,
   32,
   39,
   67,
   111,
   110,
   110,
   101,
   99,
   116,
   105,
   111,
   110,
   32,
   114,
   101,
   102,
   117,
   115,
   101,
   100,
   39,
   41
  ],
  "traceback": [
   39,
   84,
   114,
   97,
   99,
   101,
   98,
   97,
   99,
   107,
   32,
   40,
   109,
   111,
   115,
   116,
   32,
   114,
   101,
   99,
   101,
   110,
   116,
   32,
   99,
   97,
   108,
   108,
   32,
   108,
   97,
   115,
   116,
   41,
   58,
   92,
   110,
   32,
   32,
   70,
   105,
   108,
   101,
   32,
   34,
   47,
   119,
   111,
   114,
   107,
   46,
   46,
   46,
   116,
   105,
   111,
   110,
   82,
   101,
   102,
   117,
   115,
   101,
   100,
   69,
   114,
   114,
   111,
   114,
   58,
   32,
   91,
   69,
   114,
   114,
   110,
   111,
   32,
   49,
   49,
   49,
   93,
   32,
   67,
   111,
   110,
   110,
   101,
   99,
   116,
   105,
   111,
   110,
   32,
   114,
   101,
   102,
   117,
   115,
   101,
   100,
   92,
   110,
   39
  ],
  "with_traceback": [
   60,
   98,
   117,
   105,
   108,
   116,
   45,
   105,
   110,
   32,
   109,
   101,
   116,
   104,
   111,
   100,
   32,
   119,
   105,
   116,
   104,
   95,
   116,
   114,
   97,
   99,
   101,
   98,
   97,
   99,
   107,
   32,
   111,
   102,
   32,
   79,
   112,
   101,
   114,
   97,
   116,
   105,
   111,
   110,
   97,
   108,
   69,
   114,
   114,
   111,
   114,
   32,
   111,
   98,
   106,
   101,
   99,
   116,
   62
  ]
 },
 "frames": [
  {
   "call": "(request=<Request 'http://127.0.0.1:8000/' [GET]>)",
   "dump": {
    "global init_request": "<function init_request>",
    "request": "<Request 'http://127.0.0.1:8000/' [GET]>"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/app.py",
   "func": "application",
   "lines": {
    "82": "\t\trollback = True",
    "83": "",
    "84": "\t\tinit_request(request)",
    "85": "",
    "86": "\t\tfrappe.api.validate_auth()"
   },
   "lnum": 84
  },
  {
   "call": "(request=<Request 'http://127.0.0.1:8000/' [GET]>)",
   "dump": {
    "frappe. auth": "<module 'frappe.auth' from '/workspaces/dev/frappe-bench/apps/frappe/frappe/auth.py'>",
    "frappe. local": "<werkzeug.local.Local object>",
    "frappe.auth. HTTPRequest": "<class 'frappe.auth.HTTPRequest'>",
    "frappe.local.http_request": "undefined",
    "global frappe": "<module 'frappe' from '/workspaces/dev/frappe-bench/apps/frappe/frappe/__init__.py'>"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/app.py",
   "func": "init_request",
   "lines": {
    "173": "",
    "174": "\tif request.method != \"OPTIONS\":",
    "175": "\t\tfrappe.local.http_request = frappe.auth.HTTPRequest()",
    "176": "",
    "177": "\tfor before_request_task in frappe.get_hooks(\"before_request\"):"
   },
   "lnum": 175
  },
  {
   "call": "(self=<frappe.auth.HTTPRequest object>)",
   "dump": {
    "self": "<frappe.auth.HTTPRequest object>",
    "self. set_session": "<bound method HTTPRequest.set_session of <frappe.auth.HTTPRequest object>>"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/auth.py",
   "func": "__init__",
   "lines": {
    "35": "",
    "36": "\t\t# login and start/resume user session",
    "37": "\t\tself.set_session()",
    "38": "",
    "39": "\t\t# set request language"
   },
   "lnum": 37
  },
  {
   "call": "(self=<frappe.auth.HTTPRequest object>)",
   "dump": {
    "frappe. local": "<werkzeug.local.Local object>",
    "frappe.local.login_manager": "undefined",
    "global LoginManager": "<class 'frappe.auth.LoginManager'>",
    "global frappe": "<module 'frappe' from '/workspaces/dev/frappe-bench/apps/frappe/frappe/__init__.py'>"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/auth.py",
   "func": "set_session",
   "lines": {
    "69": "",
    "70": "\tdef set_session(self):",
    "71": "\t\tfrappe.local.login_manager = LoginManager()",
    "72": "",
    "73": "\tdef validate_csrf_token(self):"
   },
   "lnum": 71
  },
  {
   "call": "(self=<frappe.auth.LoginManager object>)",
   "dump": {
    "resume": "undefined",
    "self": "<frappe.auth.LoginManager object>",
    "self. make_session": "<bound method LoginManager.make_session of <frappe.auth.LoginManager object>>"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/auth.py",
   "func": "__init__",
   "lines": {
    "115": "\t\t\ttry:",
    "116": "\t\t\t\tself.resume = True",
    "117": "\t\t\t\tself.make_session(resume=True)",
    "118": "\t\t\t\tself.get_user_info()",
    "119": "\t\t\t\tself.set_user_info(resume=True)"
   },
   "lnum": 117
  },
  {
   "call": "(self=<frappe.auth.LoginManager object>, resume=True)",
   "dump": {
    "frappe. local": "<werkzeug.local.Local object>",
    "frappe.local.session_obj": "undefined",
    "full_name": "undefined",
    "global Session": "<class 'frappe.sessions.Session'>",
    "global frappe": "<module 'frappe' from '/workspaces/dev/frappe-bench/apps/frappe/frappe/__init__.py'>",
    "resume": "True",
    "self": "<frappe.auth.LoginManager object>",
    "self. full_name": "None",
    "self. user": "None",
    "self. user_type": "None",
    "user": "undefined",
    "user_type": "undefined"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/auth.py",
   "func": "make_session",
   "lines": {
    "201": "\tdef make_session(self, resume=False):",
    "202": "\t\t# start session",
    "203": "\t\tfrappe.local.session_obj = Session(",
    "204": "\t\t\tuser=self.user, resume=resume, full_name=self.full_name, user_type=self.user_type",
    "205": "\t\t)"
   },
   "lnum": 203
  },
  {
   "call": "(self=<frappe.sessions.Session object>, user=None, resume=True, full_name=None, user_type=None)",
   "dump": {
    "self": "<frappe.sessions.Session object>",
    "self. resume": "<bound method Session.resume of <frappe.sessions.Session object>>"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/sessions.py",
   "func": "__init__",
   "lines": {
    "220": "",
    "221": "\t\tif resume:",
    "222": "\t\t\tself.resume()",
    "223": "",
    "224": "\t\telse:"
   },
   "lnum": 222
  },
  {
   "call": "(self=<frappe.sessions.Session object>)",
   "dump": {
    "self": "<frappe.sessions.Session object>",
    "self. user": "'Guest'",
    "validate_ip_address": "<function validate_ip_address>"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/sessions.py",
   "func": "resume",
   "lines": {
    "296": "\t\t\tself.data.update({\"data\": data, \"user\": data.user, \"sid\": self.sid})",
    "297": "\t\t\tself.user = data.user",
    "298": "\t\t\tvalidate_ip_address(self.user)",
    "299": "\t\t\tself.device = data.device",
    "300": "\t\telse:"
   },
   "lnum": 298
  },
  {
   "call": "(user='Guest')",
   "dump": {
    "as_dict": "undefined",
    "frappe. get_cached_value": "<function get_cached_value>",
    "global frappe": "<module 'frappe' from '/workspaces/dev/frappe-bench/apps/frappe/frappe/__init__.py'>",
    "user": "'Guest'",
    "user_fields": "['restrict_ip', 'bypass_restrict_ip_check_if_2fa_enabled']"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/auth.py",
   "func": "validate_ip_address",
   "lines": {
    "416": "\tuser_fields = [\"restrict_ip\", \"bypass_restrict_ip_check_if_2fa_enabled\"]",
    "417": "\tuser_info = (",
    "418": "\t\tfrappe.get_cached_value(\"User\", user, user_fields, as_dict=True)",
    "419": "\t\tif not frappe.flags.in_test",
    "420": "\t\telse frappe.db.get_value(\"User\", user, user_fields, as_dict=True)"
   },
   "lnum": 418
  },
  {
   "call": "(doctype='User', name='Guest', fieldname=['restrict_ip', 'bypass_restrict_ip_check_if_2fa_enabled'], as_dict=True)",
   "dump": {
    "doc": "undefined",
    "doctype": "'User'",
    "global get_cached_doc": "<function get_cached_doc>",
    "name": "'Guest'"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/__init__.py",
   "func": "get_cached_value",
   "lines": {
    "1150": "def get_cached_value(doctype: str, name: str, fieldname: str = \"name\", as_dict: bool = False) -> Any:",
    "1151": "\ttry:",
    "1152": "\t\tdoc = get_cached_doc(doctype, name)",
    "1153": "\texcept DoesNotExistError:",
    "1154": "\t\tclear_last_message()"
   },
   "lnum": 1152
  },
  {
   "call": "(*args=('User', 'Guest'), **kwargs={})",
   "dump": {
    "args": "('User', 'Guest')",
    "doc": "None",
    "global get_doc": "<function get_doc>",
    "kwargs": "{}"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/__init__.py",
   "func": "get_cached_doc",
   "lines": {
    "1093": "",
    "1094": "\t# Not found in local/redis, fetch from DB",
    "1095": "\tdoc = get_doc(*args, **kwargs)",
    "1096": "",
    "1097": "\t# Store in cache"
   },
   "lnum": 1095
  },
  {
   "call": "(*args=('User', 'Guest'), **kwargs={})",
   "dump": {
    "args": "('User', 'Guest')",
    "doc": "undefined",
    "frappe": "<module 'frappe' from '/workspaces/dev/frappe-bench/apps/frappe/frappe/__init__.py'>",
    "frappe. model": "<module 'frappe.model' from '/workspaces/dev/frappe-bench/apps/frappe/frappe/model/__init__.py'>",
    "frappe.model. document": "<module 'frappe.model.document' from '/workspace...appe-bench/apps/frappe/frappe/model/document.py'>",
    "frappe.model.document. get_doc": "<function get_doc>",
    "kwargs": "{}"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/__init__.py",
   "func": "get_doc",
   "lines": {
    "1184": "\timport frappe.model.document",
    "1185": "",
    "1186": "\tdoc = frappe.model.document.get_doc(*args, **kwargs)",
    "1187": "",
    "1188": "\t# Replace cache if stale one exists"
   },
   "lnum": 1186
  },
  {
   "call": "(*args=('User', 'Guest'), **kwargs={})",
   "dump": {
    "controller": "undefined",
    "doctype": "'User'",
    "global get_controller": "<function get_controller>"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/model/document.py",
   "func": "get_doc",
   "lines": {
    "71": "\t\t\traise ValueError('\"doctype\" is a required key')",
    "72": "",
    "73": "\tcontroller = get_controller(doctype)",
    "74": "\tif controller:",
    "75": "\t\treturn controller(*args, **kwargs)"
   },
   "lnum": 73
  },
  {
   "call": "(doctype='User')",
   "dump": {
    "_get_controller": "<function get_controller.<locals>._get_controller>"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/model/base_document.py",
   "func": "get_controller",
   "lines": {
    "87": "",
    "88": "\tif frappe.local.dev_server or frappe.flags.in_migrate:",
    "89": "\t\treturn _get_controller()",
    "90": "",
    "91": "\tsite_controllers = frappe.controllers.setdefault(frappe.local.site, {})"
   },
   "lnum": 89
  },
  {
   "call": "()",
   "dump": {
    "cache": "undefined",
    "custom": "undefined",
    "doctype": "'User'",
    "frappe. db": "<frappe.database.mariadb.database.MariaDBDatabase object>",
    "frappe. flags": "{'currently_saving': [], 'redirect_location': ''...l': False, 'new_site': False, 'read_only': False}",
    "frappe.db. get_value": "<bound method Database.get_value of <frappe.database.mariadb.database.MariaDBDatabase object>>",
    "frappe.flags. in_migrate": "None",
    "global frappe": "<module 'frappe' from '/workspaces/dev/frappe-bench/apps/frappe/frappe/__init__.py'>",
    "module_name": "undefined"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/model/base_document.py",
   "func": "_get_controller",
   "lines": {
    "57": "\t\tfrom frappe.utils.nestedset import NestedSet",
    "58": "",
    "59": "\t\tmodule_name, custom = frappe.db.get_value(",
    "60": "\t\t\t\"DocType\", doctype, (\"module\", \"custom\"), cache=not frappe.flags.in_migrate",
    "61": "\t\t) or (\"Core\", False)"
   },
   "lnum": 59
  },
  {
   "call": "(self=<frappe.database.mariadb.database.MariaDBDatabase object>, doctype='DocType', filters='User', fieldname=('module', 'custom'), ignore=None, as_dict=False, debug=False, order_by='KEEP_DEFAULT_ORDERING', cache=True, for_update=False, run=True, pluck=False, distinct=False)",
   "dump": {
    "as_dict": "False",
    "cache": "True",
    "debug": "False",
    "distinct": "False",
    "doctype": "'DocType'",
    "fieldname": "('module', 'custom')",
    "filters": "'User'",
    "for_update": "False",
    "ignore": "None",
    "limit": "undefined",
    "order_by": "'KEEP_DEFAULT_ORDERING'",
    "pluck": "False",
    "result": "undefined",
    "run": "True",
    "self": "<frappe.database.mariadb.database.MariaDBDatabase object>",
    "self. get_values": "<bound method Database.get_values of <frappe.database.mariadb.database.MariaDBDatabase object>>"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/database/database.py",
   "func": "get_value",
   "lines": {
    "554": "\t\t\"\"\"",
    "555": "",
    "556": "\t\tresult = self.get_values(",
    "557": "\t\t\tdoctype,",
    "558": "\t\t\tfilters,"
   },
   "lnum": 556
  },
  {
   "call": "(self=<frappe.database.mariadb.database.MariaDBDatabase object>, doctype='DocType', filters='User', fieldname=('module', 'custom'), ignore=None, as_dict=False, debug=False, order_by='modified', update=None, cache=True, for_update=False, run=True, pluck=False, distinct=False, limit=1)",
   "dump": {
    "as_dict": "False",
    "debug": "False",
    "distinct": "False",
    "doctype": "'DocType'",
    "fields": "('module', 'custom')",
    "filters": "'User'",
    "for_update": "False",
    "limit": "1",
    "order_by": "'modified'",
    "out": "None",
    "pluck": "False",
    "run": "True",
    "self": "<frappe.database.mariadb.database.MariaDBDatabase object>",
    "self. _get_values_from_table": "<bound method Database._get_values_from_table of...atabase.mariadb.database.MariaDBDatabase object>>",
    "update": "None"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/database/database.py",
   "func": "get_values",
   "lines": {
    "651": "\t\t\t\t\tif order_by:",
    "652": "\t\t\t\t\t\torder_by = \"modified\" if order_by == DefaultOrderBy else order_by",
    "653": "\t\t\t\t\tout = self._get_values_from_table(",
    "654": "\t\t\t\t\t\tfields=fields,",
    "655": "\t\t\t\t\t\tfilters=filters,"
   },
   "lnum": 653
  },
  {
   "call": "(self=<frappe.database.mariadb.database.MariaDBDatabase object>, fields=('module', 'custom'), filters='User', doctype='DocType', as_dict=False, debug=False, order_by='modified', update=None, for_update=False, run=True, pluck=False, distinct=False, limit=1)",
   "dump": {
    "as_dict": "False",
    "debug": "False",
    "pluck": "False",
    "query": "SELECT `module`,`custom` FROM `tabDocType` WHERE `name`='User' ORDER BY `modified` DESC LIMIT 1",
    "query. run": "<bound method patch_query_execute.<locals>.execu...E `name`='User' ORDER BY `modified` DESC LIMIT 1>",
    "run": "True",
    "update": "None"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/database/database.py",
   "func": "_get_values_from_table",
   "lines": {
    "881": "\t\t\tas_dict = True",
    "882": "",
    "883": "\t\treturn query.run(as_dict=as_dict, debug=debug, update=update, run=run, pluck=pluck)",
    "884": "",
    "885": "\tdef _get_value_for_many_names("
   },
   "lnum": 883
  },
  {
   "call": "(query='SELECT `module`,`custom` FROM `tabDocType` WHERE `name`=%(param1)s ORDER BY `modified` DESC LIMIT 1', *args=(), **kwargs={'as_dict': False, 'debug': False, 'pluck': False, 'run': True, 'update': None})",
   "dump": {
    "args": "()",
    "frappe. db": "<frappe.database.mariadb.database.MariaDBDatabase object>",
    "frappe.db. sql": "<bound method Database.sql of <frappe.database.mariadb.database.MariaDBDatabase object>>",
    "global frappe": "<module 'frappe' from '/workspaces/dev/frappe-bench/apps/frappe/frappe/__init__.py'>",
    "kwargs": "{'as_dict': False, 'debug': False, 'pluck': False, 'run': True, 'update': None}",
    "params": "{'param1': 'User'}",
    "query": "'SELECT `module`,`custom` FROM `tabDocType` WHERE `name`=%(param1)s ORDER BY `modified` DESC LIMIT 1'",
    "result": "undefined"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/query_builder/utils.py",
   "func": "execute_query",
   "lines": {
    "85": "\t\tchild_queries = query._child_queries if isinstance(query._child_queries, list) else []",
    "86": "\t\tquery, params = prepare_query(query)",
    "87": "\t\tresult = frappe.db.sql(query, params, *args, **kwargs)  # nosemgrep",
    "88": "\t\texecute_child_queries(child_queries, result)",
    "89": "\t\treturn result"
   },
   "lnum": 87
  },
  {
   "call": "(self=<frappe.database.mariadb.database.MariaDBDatabase object>, query='SELECT `module`,`custom` FROM `tabDocType` WHERE `name`=%(param1)s ORDER BY `modified` DESC LIMIT 1', values={'param1': 'User'}, as_dict=False, as_list=0, formatted=0, debug=False, ignore_ddl=0, as_utf8=0, auto_commit=0, update=None, explain=False, run=True, pluck=False, as_iterator=False)",
   "dump": {
    "self": "<frappe.database.mariadb.database.MariaDBDatabase object>",
    "self. connect": "<bound method Database.connect of <frappe.database.mariadb.database.MariaDBDatabase object>>"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/database/database.py",
   "func": "sql",
   "lines": {
    "218": "",
    "219": "\t\tif not self._conn:",
    "220": "\t\t\tself.connect()",
    "221": "",
    "222": "\t\t# in transaction validations"
   },
   "lnum": 220
  },
  {
   "call": "(self=<frappe.database.mariadb.database.MariaDBDatabase object>)",
   "dump": {
    "global Union": "typing.Union",
    "self": "<frappe.database.mariadb.database.MariaDBDatabase object>",
    "self. _conn": "None",
    "self. get_connection": "<bound method MariaDBConnectionUtil.get_connecti...atabase.mariadb.database.MariaDBDatabase object>>"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/database/database.py",
   "func": "connect",
   "lines": {
    "123": "\t\t\"\"\"Connects to a database as set in `site_config.json`.\"\"\"",
    "124": "\t\tself.cur_db_name = self.user",
    "125": "\t\tself._conn: Union[\"MariadbConnection\", \"PostgresConnection\"] = self.get_connection()",
    "126": "\t\tself._cursor: Union[\"MariadbCursor\", \"PostgresCursor\"] = self._conn.cursor()",
    "127": "\t\tfrappe.local.rollback_observers = []"
   },
   "lnum": 125
  },
  {
   "call": "(self=<frappe.database.mariadb.database.MariaDBDatabase object>)",
   "dump": {
    "conn": "undefined",
    "self": "<frappe.database.mariadb.database.MariaDBDatabase object>",
    "self. _get_connection": "<bound method MariaDBConnectionUtil._get_connect...atabase.mariadb.database.MariaDBDatabase object>>"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/database/mariadb/database.py",
   "func": "get_connection",
   "lines": {
    "97": "class MariaDBConnectionUtil:",
    "98": "\tdef get_connection(self):",
    "99": "\t\tconn = self._get_connection()",
    "100": "\t\tconn.auto_reconnect = True",
    "101": "\t\treturn conn"
   },
   "lnum": 99
  },
  {
   "call": "(self=<frappe.database.mariadb.database.MariaDBDatabase object>)",
   "dump": {
    "self": "<frappe.database.mariadb.database.MariaDBDatabase object>",
    "self. create_connection": "<bound method MariaDBConnectionUtil.create_conne...atabase.mariadb.database.MariaDBDatabase object>>"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/database/mariadb/database.py",
   "func": "_get_connection",
   "lines": {
    "103": "\tdef _get_connection(self):",
    "104": "\t\t\"\"\"Return MariaDB connection object.\"\"\"",
    "105": "\t\treturn self.create_connection()",
    "106": "",
    "107": "\tdef create_connection(self):"
   },
   "lnum": 105
  },
  {
   "call": "(self=<frappe.database.mariadb.database.MariaDBDatabase object>)",
   "dump": {
    "global pymysql": "<module 'pymysql' from '/workspaces/dev/frappe-b...ib/python3.10/site-packages/pymysql/__init__.py'>",
    "pymysql. connect": "<class 'pymysql.connections.Connection'>",
    "self": "<frappe.database.mariadb.database.MariaDBDatabase object>",
    "self. get_connection_settings": "<bound method MariaDBConnectionUtil.get_connecti...atabase.mariadb.database.MariaDBDatabase object>>"
   },
   "file": "/workspaces/dev/frappe-bench/apps/frappe/frappe/database/mariadb/database.py",
   "func": "create_connection",
   "lines": {
    "106": "",
    "107": "\tdef create_connection(self):",
    "108": "\t\treturn pymysql.connect(**self.get_connection_settings())",
    "109": "",
    "110": "\tdef set_execution_timeout(self, seconds: int):"
   },
   "lnum": 108
  },
  {
   "call": "(self=<pymysql.connections.Connection object>, user='_0b8ac940c97a9845', password='TlWjG2sS6MjkbZWh', host='127.0.0.1', database='_0b8ac940c97a9845', unix_socket=None, port=0, charset='utf8mb4', sql_mode=None, read_default_file=None, conv={<class 'bool'>: <function escape_bool>, <class 'int'>: <function escape_int>, <class 'float'>: <function escape_float>, <class 'str'>: <function escape_str>, <class 'bytes'>: <function escape_bytes>, <class 'tuple'>: <function escape_sequence>, <class 'list'>: <function escape_sequence>, <class 'set'>: <function escape_sequence>, <class 'frozenset'>: <function escape_sequence>, <class 'dict'>: <function escape_dict>, ...}, use_unicode=True, client_flag=3842573, cursorclass=<class 'pymysql.cursors.Cursor'>, init_command=None, connect_timeout=10, read_default_group=None, autocommit=False, local_infile=False, max_allowed_packet=16777216, defer_connect=False, auth_plugin_map=None, read_timeout=None, write_timeout=None, bind_address=None, binary_prefix=False, program_name=None, server_public_key=None, ssl=None, ssl_ca=None, ssl_cert=None, ssl_disabled=None, ssl_key=None, ssl_verify_cert=None, ssl_verify_identity=None, compress=None, named_pipe=None, passwd=None, db=None)",
   "dump": {
    "self": "<pymysql.connections.Connection object>",
    "self. connect": "<bound method Connection.connect of <pymysql.connections.Connection object>>"
   },
   "file": "/workspaces/dev/frappe-bench/env/lib/python3.10/site-packages/pymysql/connections.py",
   "func": "__init__",
   "lines": {
    "350": "            self._sock = None",
    "351": "        else:",
    "352": "            self.connect()",
    "353": "",
    "354": "    def __enter__(self):"
   },
   "lnum": 352
  },
  {
   "call": "(self=<pymysql.connections.Connection object>, sock=None)",
   "dump": {
    "exc": "OperationalError(2003, \"Can't connect to MySQL s...on '127.0.0.1' ([Errno 111] Connection refused)\")"
   },
   "file": "/workspaces/dev/frappe-bench/env/lib/python3.10/site-packages/pymysql/connections.py",
   "func": "connect",
   "lines": {
    "666": "                if DEBUG:",
    "667": "                    print(exc.traceback)",
    "668": "                raise exc",
    "669": "",
    "670": "            # If e is neither DatabaseError or IOError, It's a bug."
   },
   "lnum": 668
  }
 ],
 "locals": {
  "exc": "OperationalError(2003, \"Can't connect to MySQL s...on '127.0.0.1' ([Errno 111] Connection refused)\")",
  "kwargs": "{}",
  "self": "<pymysql.connections.Connection object>",
  "sock": "None"
 },
 "pyver": "Python 3.10.13: /workspaces/dev/frappe-bench/env/bin/python (prefix: /workspaces/dev/frappe-bench/env)",
 "timestamp": "2024-02-19 09:03:54.923062",
 "traceback": "Traceback (most recent call last):\n  File \"/workspaces/dev/frappe-bench/env/lib/python3.10/site-packages/pymysql/connections.py\", line 616, in connect\n    sock = socket.create_connection(\n  File \"/home/codespace/.python/current/lib/python3.10/socket.py\", line 845, in create_connection\n    raise err\n  File \"/home/codespace/.python/current/lib/python3.10/socket.py\", line 833, in create_connection\n    sock.connect(sa)\nConnectionRefusedError: [Errno 111] Connection refused\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/app.py\", line 84, in application\n    init_request(request)\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/app.py\", line 175, in init_request\n    frappe.local.http_request = frappe.auth.HTTPRequest()\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/auth.py\", line 37, in __init__\n    self.set_session()\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/auth.py\", line 71, in set_session\n    frappe.local.login_manager = LoginManager()\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/auth.py\", line 117, in __init__\n    self.make_session(resume=True)\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/auth.py\", line 203, in make_session\n    frappe.local.session_obj = Session(\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/sessions.py\", line 222, in __init__\n    self.resume()\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/sessions.py\", line 298, in resume\n    validate_ip_address(self.user)\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/auth.py\", line 418, in validate_ip_address\n    frappe.get_cached_value(\"User\", user, user_fields, as_dict=True)\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/__init__.py\", line 1152, in get_cached_value\n    doc = get_cached_doc(doctype, name)\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/__init__.py\", line 1095, in get_cached_doc\n    doc = get_doc(*args, **kwargs)\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/__init__.py\", line 1186, in get_doc\n    doc = frappe.model.document.get_doc(*args, **kwargs)\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/model/document.py\", line 73, in get_doc\n    controller = get_controller(doctype)\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/model/base_document.py\", line 89, in get_controller\n    return _get_controller()\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/model/base_document.py\", line 59, in _get_controller\n    module_name, custom = frappe.db.get_value(\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/database/database.py\", line 556, in get_value\n    result = self.get_values(\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/database/database.py\", line 653, in get_values\n    out = self._get_values_from_table(\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/database/database.py\", line 883, in _get_values_from_table\n    return query.run(as_dict=as_dict, debug=debug, update=update, run=run, pluck=pluck)\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/query_builder/utils.py\", line 87, in execute_query\n    result = frappe.db.sql(query, params, *args, **kwargs)  # nosemgrep\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/database/database.py\", line 220, in sql\n    self.connect()\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/database/database.py\", line 125, in connect\n    self._conn: Union[\"MariadbConnection\", \"PostgresConnection\"] = self.get_connection()\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/database/mariadb/database.py\", line 99, in get_connection\n    conn = self._get_connection()\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/database/mariadb/database.py\", line 105, in _get_connection\n    return self.create_connection()\n  File \"/workspaces/dev/frappe-bench/apps/frappe/frappe/database/mariadb/database.py\", line 108, in create_connection\n    return pymysql.connect(**self.get_connection_settings())\n  File \"/workspaces/dev/frappe-bench/env/lib/python3.10/site-packages/pymysql/connections.py\", line 352, in __init__\n    self.connect()\n  File \"/workspaces/dev/frappe-bench/env/lib/python3.10/site-packages/pymysql/connections.py\", line 668, in connect\n    raise exc\npymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on '127.0.0.1' ([Errno 111] Connection refused)\")\n"
}